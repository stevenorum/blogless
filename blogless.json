{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Description": "Blogless stack.", 
  "Outputs": {
    "BaseApiUrl": {
      "Value": {
        "Fn::Join": [
          "", 
          [
            "https://", 
            {
              "Ref": "BloglessAPI"
            }, 
            ".execute-api.", 
            {
              "Ref": "AWS::Region"
            }, 
            ".amazonaws.com"
          ]
        ]
      }
    }, 
    "LambdaZipBucket": {
      "Value": {
        "Ref": "LambdaZipBucket"
      }
    }
  }, 
  "Parameters": {}, 
  "Resources": {
    "APIGWExecRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              }
            }
          ], 
          "Version": "2012-10-17"
        }, 
        "Path": "/", 
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction"
                  ], 
                  "Effect": "Allow", 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "bloglessLandingFunction", 
                        "Arn"
                      ]
                    }, 
                    {
                      "Fn::GetAtt": [
                        "bloglessPostFunction", 
                        "Arn"
                      ]
                    }, 
                    {
                      "Fn::GetAtt": [
                        "bloglessStaticFunction", 
                        "Arn"
                      ]
                    }, 
                    {
                      "Fn::GetAtt": [
                        "bloglessCatchallFunction", 
                        "Arn"
                      ]
                    }
                  ]
                }, 
                {
                  "Action": [
                    "iam:PassRole"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ], 
              "Version": "2012-10-17"
            }, 
            "PolicyName": "root"
          }
        ]
      }, 
      "Type": "AWS::IAM::Role"
    }, 
    "BloglessAPI": {
      "Properties": {
        "Description": "The ApiGateway API for BloglessAPI", 
        "Name": "BloglessAPI", 
        "Parameters": {}
      }, 
      "Type": "AWS::ApiGateway::RestApi"
    }, 
    "IndexhtmlResource": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "BloglessAPI", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "index.html", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Resource"
    }, 
    "LambdaZipBucket": {
      "Properties": {}, 
      "Type": "AWS::S3::Bucket"
    }, 
    "PostsResource": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "BloglessAPI", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "posts", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Resource"
    }, 
    "ProxyplusResource": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "BloglessAPI", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "proxyplus", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Resource"
    }, 
    "ProxyplusproxyResource": {
      "Properties": {
        "ParentId": {
          "Ref": "ProxyplusResource"
        }, 
        "PathPart": "{proxy+}", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Resource"
    }, 
    "StylecssResource": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "BloglessAPI", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "style.css", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Resource"
    }, 
    "alphaDeployment": {
      "DependsOn": [
        "bloglessCatchallProxyplusResourceMethod", 
        "bloglessStaticStylecssResourceMethod", 
        "bloglessPostPostsResourceMethod", 
        "bloglessLandingrootResourceMethod", 
        "bloglessCatchallProxyplusproxyResourceMethod", 
        "bloglessLandingIndexhtmlResourceMethod"
      ], 
      "Properties": {
        "Description": "Deployment of the API to alpha.", 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }, 
        "StageDescription": {
          "CacheClusterEnabled": false, 
          "Description": "Alpha stage.", 
          "MetricsEnabled": true, 
          "StageName": "alpha"
        }, 
        "StageName": "alpha"
      }, 
      "Type": "AWS::ApiGateway::Deployment"
    }, 
    "bloglessCatchallFunction": {
      "Properties": {
        "Code": {
          "S3Bucket": "sunyata-blogless-lambdazipbucket-12yucdsn52n0b", 
          "S3Key": "bloglessCatchall-lambda-code.zip.2016-12-22-2015"
        }, 
        "Description": "blogless lambda function.", 
        "Environment": {
          "Variables": {}
        }, 
        "FunctionName": "bloglessCatchall", 
        "Handler": "handlers.catchall", 
        "MemorySize": 512, 
        "Role": {
          "Fn::GetAtt": [
            "dynamoReadRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Timeout": 10
      }, 
      "Type": "AWS::Lambda::Function"
    }, 
    "bloglessCatchallPermissions": {
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "FunctionName": {
          "Fn::GetAtt": [
            "bloglessCatchallFunction", 
            "Arn"
          ]
        }, 
        "Principal": "apigateway.amazonaws.com", 
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }, 
      "Type": "AWS::Lambda::Permission"
    }, 
    "bloglessCatchallProxyplusResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/proxyplus\\\"]}\""
          }, 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessCatchallFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ProxyplusResource"
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "bloglessCatchallProxyplusproxyResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/proxyplus/\\\"]}\""
          }, 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessCatchallFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ProxyplusproxyResource"
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "bloglessLandingFunction": {
      "Properties": {
        "Code": {
          "S3Bucket": "sunyata-blogless-lambdazipbucket-12yucdsn52n0b", 
          "S3Key": "bloglessLanding-lambda-code.zip.2016-12-22-2015"
        }, 
        "Description": "blogless lambda function.", 
        "Environment": {
          "Variables": {}
        }, 
        "FunctionName": "bloglessLanding", 
        "Handler": "handlers.landing_page", 
        "MemorySize": 256, 
        "Role": {
          "Fn::GetAtt": [
            "dynamoReadRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Timeout": 10
      }, 
      "Type": "AWS::Lambda::Function"
    }, 
    "bloglessLandingIndexhtmlResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }, 
              "ResponseTemplates": {
                "text/html": "$input.path('$')"
              }, 
              "StatusCode": "200"
            }
          ], 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/index.html\\\"]}\""
          }, 
          "Type": "AWS", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessLandingFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "IndexhtmlResource"
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "bloglessLandingPermissions": {
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "FunctionName": {
          "Fn::GetAtt": [
            "bloglessLandingFunction", 
            "Arn"
          ]
        }, 
        "Principal": "apigateway.amazonaws.com", 
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }, 
      "Type": "AWS::Lambda::Permission"
    }, 
    "bloglessLandingrootResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }, 
              "ResponseTemplates": {
                "text/html": "$input.path('$')"
              }, 
              "StatusCode": "200"
            }
          ], 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/\\\"]}\""
          }, 
          "Type": "AWS", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessLandingFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {}, 
        "ResourceId": {
          "Fn::GetAtt": [
            "BloglessAPI", 
            "RootResourceId"
          ]
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "bloglessPostFunction": {
      "Properties": {
        "Code": {
          "S3Bucket": "sunyata-blogless-lambdazipbucket-12yucdsn52n0b", 
          "S3Key": "bloglessPost-lambda-code.zip.2016-12-22-2015"
        }, 
        "Description": "blogless lambda function.", 
        "Environment": {
          "Variables": {}
        }, 
        "FunctionName": "bloglessPost", 
        "Handler": "handlers.view_post", 
        "MemorySize": 256, 
        "Role": {
          "Fn::GetAtt": [
            "dynamoReadRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Timeout": 10
      }, 
      "Type": "AWS::Lambda::Function"
    }, 
    "bloglessPostPermissions": {
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "FunctionName": {
          "Fn::GetAtt": [
            "bloglessPostFunction", 
            "Arn"
          ]
        }, 
        "Principal": "apigateway.amazonaws.com", 
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }, 
      "Type": "AWS::Lambda::Permission"
    }, 
    "bloglessPostPostsResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              }, 
              "ResponseTemplates": {
                "text/html": "$input.path('$')"
              }, 
              "StatusCode": "200"
            }
          ], 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/posts\\\"],\\\"identifier\\\":\\\"$input.params('id')\\\"}\""
          }, 
          "Type": "AWS", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessPostFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {
          "method.request.querystring.id": false
        }, 
        "ResourceId": {
          "Ref": "PostsResource"
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "bloglessStaticFunction": {
      "Properties": {
        "Code": {
          "S3Bucket": "sunyata-blogless-lambdazipbucket-12yucdsn52n0b", 
          "S3Key": "bloglessStatic-lambda-code.zip.2016-12-22-2015"
        }, 
        "Description": "blogless lambda function.", 
        "Environment": {
          "Variables": {}
        }, 
        "FunctionName": "bloglessStatic", 
        "Handler": "handlers.load_static", 
        "MemorySize": 512, 
        "Role": {
          "Fn::GetAtt": [
            "dynamoReadRole", 
            "Arn"
          ]
        }, 
        "Runtime": "python2.7", 
        "Timeout": 10
      }, 
      "Type": "AWS::Lambda::Function"
    }, 
    "bloglessStaticPermissions": {
      "Properties": {
        "Action": "lambda:InvokeFunction", 
        "FunctionName": {
          "Fn::GetAtt": [
            "bloglessStaticFunction", 
            "Arn"
          ]
        }, 
        "Principal": "apigateway.amazonaws.com", 
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      }, 
      "Type": "AWS::Lambda::Permission"
    }, 
    "bloglessStaticStylecssResourceMethod": {
      "Properties": {
        "ApiKeyRequired": false, 
        "AuthorizationType": "NONE", 
        "HttpMethod": "GET", 
        "Integration": {
          "CacheKeyParameters": [], 
          "Credentials": {
            "Fn::GetAtt": [
              "APIGWExecRole", 
              "Arn"
            ]
          }, 
          "IntegrationHttpMethod": "POST", 
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/css'"
              }, 
              "ResponseTemplates": {
                "text/css": "$input.path('$')"
              }, 
              "StatusCode": "200"
            }
          ], 
          "PassthroughBehavior": "WHEN_NO_TEMPLATES", 
          "RequestTemplates": {
            "application/json": "\"{\\\"basepath\\\":[\\\"/style.css\\\"],\\\"filename\\\":\\\"static/style.css\\\"}\""
          }, 
          "Type": "AWS", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:aws:apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "bloglessStaticFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }, 
            "StatusCode": "200"
          }
        ], 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "StylecssResource"
        }, 
        "RestApiId": {
          "Ref": "BloglessAPI"
        }
      }, 
      "Type": "AWS::ApiGateway::Method"
    }, 
    "dynamoReadRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ], 
          "Version": "2012-10-17"
        }, 
        "Path": "/", 
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "logs:CreateLogGroup", 
                  "Effect": "Allow", 
                  "Resource": {
                    "Fn::Join": [
                      ":", 
                      [
                        "arn:aws:logs", 
                        {
                          "Ref": "AWS::Region"
                        }, 
                        {
                          "Ref": "AWS::AccountId"
                        }, 
                        "*"
                      ]
                    ]
                  }
                }, 
                {
                  "Action": [
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Effect": "Allow", 
                  "Resource": {
                    "Fn::Join": [
                      ":", 
                      [
                        "arn:aws:logs", 
                        {
                          "Ref": "AWS::Region"
                        }, 
                        {
                          "Ref": "AWS::AccountId"
                        }, 
                        "log-group:/aws/lambda/*"
                      ]
                    ]
                  }
                }, 
                {
                  "Action": [
                    "dynamodb:Describe*", 
                    "dynamodb:Get*", 
                    "dynamodb:List*", 
                    "dynamodb:Query*", 
                    "dynamodb:Scan"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ], 
              "Version": "2012-10-17"
            }, 
            "PolicyName": "root"
          }
        ]
      }, 
      "Type": "AWS::IAM::Role"
    }
  }
}
